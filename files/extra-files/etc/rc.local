#!/bin/sh
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

# read the sonaremin config file if it exists, otherwise set default values
if [ -f /data/config/sonaremin.txt ]; then
  . /data/config/sonaremin.txt
else
  # start with a hdmi monitor connected (display) or virtual
  DISPLAY_MODE=display
  #DISPLAY_MODE=virtual
  #DISPLAY_MODE=headless
  # enable tuning for audio usage
  AUDIO_TUNE=yes
  #AUDIO_TUNE=no
  # start rtpmidi server for midi over network
  #RTPMIDI=yes
  RTPMIDI=no
  # start samba server to access /data via network
  SAMBA_SERVER=yes
  #SAMBA_SERVER=no
fi

# flash based storage does not need scheduling
if [ -d /sys/block/mmcblk0 ] || [ -d /sys/block/mmcblk1 ] || [ -d /sys/block/mmcblk2 ]; then
  for i in /sys/block/mmcblk?/queue/scheduler; do
    # older and newer kernel differ here: old noop, new none
    grep -q none $i
    if [ "$?" = "0" ]; then
      echo none > $i
    else
      echo noop > $i
    fi
  done
fi
if [ -d /sys/block/sda ] || [ -d /sys/block/sdb ] || [ -d /sys/block/sdc ]; then
  for i in /sys/block/sd?/queue/scheduler; do
    # older and newer kernel differ here: old noop, new none
    grep -q none $i
    if [ "$?" = "0" ]; then
      echo none > $i
    else
      echo noop > $i
    fi
  done
fi

# make sure the mali module gets loaded if there is one
depmod -a
if [ -f /lib/modules/`uname -r`/extra/mali.ko ]; then
  modprobe mali
elif [ -f /lib/modules/`uname -r`/extra/mali_kbase.ko ]; then
  modprobe mali_kbase
elif [ -f /lib/modules/`uname -r`/kernel/drivers/gpu/arm/mali/maligpu.ko ]; then
  modprobe maligpu
fi

rm -rf /opt/libgl
rm -f /etc/X11/xorg.conf.d/xorg.conf

for i in /data/config/systems/*.sh; do
  . $i
done

# read the sonaremin config file if it exists
if [ -f /data/config/info.txt ]; then
  . /data/config/info.txt
fi

if [ "${DISABLE_CPU_CORES}" != "" ]; then
  for cpu in ${DISABLE_CPU_CORES}; do
    echo 0 > /sys/devices/system/cpu/cpu${cpu}/online
  done
fi

if [ -x /etc/rc.audio ] && [ "$AUDIO_TUNE" = "yes" ]; then
  /etc/rc.audio > /tmp/rc.audio.log 2>&1
else
  systemctl start ondemand
fi

echo "start of rc.boot-local"
if [ -f /data/config/startup/rc.boot-local ]; then
  . /data/config/startup/rc.boot-local
fi
echo "end of rc.boot-local"

rm -rf /data/FSCK*.REC

export MY_HOSTNAME=`hostname`
export MY_VIRMIDI=`amidi -l | grep "Virtual Raw MIDI" | grep ",0" | sed 's,IO  hw:,,g;s,\,0.*,,g'`
sed "s,Virtual Raw MIDI .-0,Virtual Raw MIDI $MY_VIRMIDI-0,g;s,VirMIDI .-0,VirMIDI $MY_VIRMIDI-0,g" -i /data/config/qjackctl/qjackctl-patchbay.xml

# start raveloxmidi rtpmidi server
if [ "$RTPMIDI" = "yes" ]; then
  sed "s,__HOSTNAME__,$MY_HOSTNAME,g" /data/config/rtpmidi/raveloxmidi.conf > /opt/rtpmidi/raveloxmidi.conf
  sed "s/= hw:.,/= hw:$MY_VIRMIDI,/g" -i /opt/rtpmidi/raveloxmidi.conf
  ( systemctl start avahi-daemon ; sleep 15 ; systemctl start raveloxmidi ) &
fi

# start samba server
if [ "$SAMBA_SERVER" = "yes" ]; then
  sed "s,__HOSTNAME__,$MY_HOSTNAME,g" /data/config/samba/smb.conf > /etc/samba/smb.conf
  ( sleep 15 ; systemctl start smbd ) &
fi

# set realtime capabilities for rack v1
# HAS_OVERLAYROOT is 0 if overlayroot is in place
df | grep -q overlayroot
HAS_OVERLAYROOT=$?
if [ -f /home/sonaremin/vcvrack-v1/Rack ]; then
  if [ "$HAS_OVERLAYROOT" = "0" ]; then
    overlayroot-chroot setcap cap_sys_nice+ep /home/sonaremin/vcvrack-v1/Rack
  else
    setcap cap_sys_nice+ep /home/sonaremin/vcvrack-v1/Rack
  fi
fi

# the way we use the mali gpu driver it can be used always
# i.e. for display and virtual mode
echo /opt/gl4es >  /etc/ld.so.conf.d/aaa-libgl.conf
echo /opt/libgl >>  /etc/ld.so.conf.d/aaa-libgl.conf
ldconfig

# better use a fresh copy of some files if their size is zero as they
# might have gotten corrupted on an unclean shutdown maybe
if [ ! -s /data/config/vcvrack-v1/settings.json ]; then
  cp /data/config/vcvrack-v1/backup/settings.json /data/config/vcvrack-v1/settings.json
fi
if [ ! -s /data/config/qjackctl/qjackctl-patchbay.xml ]; then
  cp /data/config/qjackctl/backup/qjackctl-patchbay.xml /data/config/qjackctl/qjackctl-patchbay.xml
fi

if [ "$SAMPLE_RATE" != "" ]; then
  sed -i.backup-rc-local "s,\"sampleRate\":\ .*,\"sampleRate\": ${SAMPLE_RATE}.0\,,g" /data/config/vcvrack-v1/settings.json
  sed -i.backup-rc-local "s,SampleRate=.*,SampleRate=$SAMPLE_RATE,g" /data/config/qjackctl/QjackCtl.conf
else
  # run low performance systems with 22.05 khz sample rate by default
  if [ "$SYSTEM_MODEL" = "h3" ] || [ "$SYSTEM_MODEL" = "rk322x" ] || [ "$SYSTEM_MODEL" = "s805" ]; then
    sed -i.backup-rc-local "s,\"sampleRate\":\ .*,\"sampleRate\": 22050.0\,,g" /data/config/vcvrack-v1/settings.json
    sed -i.backup-rc-local "s,SampleRate=.*,SampleRate=22050,g" /data/config/qjackctl/QjackCtl.conf
  else
    sed -i.backup-rc-local "s,\"sampleRate\":\ .*,\"sampleRate\": 32000.0\,,g" /data/config/vcvrack-v1/settings.json
    sed -i.backup-rc-local "s,SampleRate=.*,SampleRate=32000,g" /data/config/qjackctl/QjackCtl.conf
  fi
fi

if [ "$DISPLAY_MODE" = "display" ]; then
  # set back cursor lock mode
  sed -i.backup-rc-local 's/"allowCursorLock": false,/"allowCursorLock": true,/g' /data/config/vcvrack-v1/settings.json
  systemctl start x11.service
else
  if [ "$SYSTEM_MODEL" = "raspberrypi" ]; then
    # put the proper hdmi port into the xorgxrdp config
    MY_HDMI=`ls /sys/class/drm | grep HDMI | head -n 1 | sed 's,.*HDMI,HDMI,g;s,-.-,-,g'`
    sed -i "s,Option \"monitor-HDMI.*,Option \"monitor-${MY_HDMI}\" \"${MY_HDMI}\",g;s,Identifier \"HDMI.*,Identifier \"${MY_HDMI}\",g" /etc/X11/xrdp/xorg.conf
  fi
  if [ -x /home/sonaremin/bin/start-xpra.sh ]; then
    # disable cursor lock mode to make virtual mode less sluggish
    # especially the scroll bars are very hard to use otherwise
    sed -i.backup-rc-local 's/"allowCursorLock": true,/"allowCursorLock": false,/g' /data/config/vcvrack-v1/settings.json
    su -c /home/sonaremin/bin/start-xpra.sh sonaremin
  fi
fi
